// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(SpellLearningContext))]
    [Migration("20250922192127_MigratonName")]
    partial class MigratonName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.DeckSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("slot_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SlotId"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer")
                        .HasColumnName("deck_id");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("integer")
                        .HasColumnName("slot_number");

                    b.HasKey("SlotId")
                        .HasName("deck_slots_pkey");

                    b.HasIndex("InventoryId");

                    b.HasIndex(new[] { "DeckId" }, "idx_deck_slots_deck_id");

                    b.ToTable("deck_slots", (string)null);
                });

            modelBuilder.Entity("Domain.Models.GachaPull", b =>
                {
                    b.Property<int>("PullId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pull_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PullId"));

                    b.Property<DateTime?>("PullDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pull_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("SpellId")
                        .HasColumnType("integer")
                        .HasColumnName("spell_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("PullId")
                        .HasName("gacha_pulls_pkey");

                    b.HasIndex(new[] { "SpellId" }, "idx_gacha_pulls_spell_id");

                    b.HasIndex(new[] { "UserId" }, "idx_gacha_pulls_user_id");

                    b.ToTable("gacha_pulls", (string)null);
                });

            modelBuilder.Entity("Domain.Models.GameSafe", b =>
                {
                    b.Property<int>("SaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("save_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SaveId"));

                    b.Property<int?>("EquippedDeckId")
                        .HasColumnType("integer")
                        .HasColumnName("equipped_deck_id");

                    b.Property<int?>("HighScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("high_score")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("level")
                        .HasDefaultValueSql("1");

                    b.Property<string>("SaveData")
                        .HasColumnType("text")
                        .HasColumnName("save_data");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("SaveId")
                        .HasName("game_saves_pkey");

                    b.HasIndex("EquippedDeckId");

                    b.HasIndex(new[] { "UserId" }, "idx_game_saves_user_id");

                    b.ToTable("game_saves", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("spell_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpellId"));

                    b.Property<int?>("BaseDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("base_damage")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("CostAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cost_amount")
                        .HasDefaultValueSql("0");

                    b.Property<string>("CostCurrency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cost_currency")
                        .HasDefaultValueSql("'click'::character varying");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("GameEffectCode")
                        .HasColumnType("text")
                        .HasColumnName("game_effect_code");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Rarity")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rarity")
                        .HasDefaultValueSql("'обычная'::character varying");

                    b.HasKey("SpellId");

                    b.ToTable("spells", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Trace", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("trade_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TradeId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("InventoryIdOffer")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id_offer");

                    b.Property<int>("InventoryIdWant")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id_want");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("resolved_at");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'ожидание'::character varying");

                    b.Property<int>("UserIdOffer")
                        .HasColumnType("integer")
                        .HasColumnName("user_id_offer");

                    b.Property<int>("UserIdReceive")
                        .HasColumnType("integer")
                        .HasColumnName("user_id_receive");

                    b.HasKey("TradeId")
                        .HasName("traces_pkey");

                    b.HasIndex("InventoryIdOffer");

                    b.HasIndex("InventoryIdWant");

                    b.HasIndex(new[] { "UserIdOffer" }, "idx_traces_user_offer");

                    b.HasIndex(new[] { "UserIdReceive" }, "idx_traces_user_receive");

                    b.ToTable("traces", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CurrencyClick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("currency_click")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("CurrencyGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("currency_game")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "idx_users_email");

                    b.HasIndex(new[] { "Username" }, "idx_users_username");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserClickerUpgrade", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("integer")
                        .HasColumnName("upgrade_id");

                    b.Property<DateTime?>("PurchasedLast")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("purchased_last")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("quantity")
                        .HasDefaultValueSql("1");

                    b.HasKey("UserId", "UpgradeId")
                        .HasName("user_clicker_upgrades_pkey");

                    b.HasIndex("UpgradeId");

                    b.ToTable("user_clicker_upgrades", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserDeck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("deck_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeckId"));

                    b.Property<string>("DeckName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deck_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("DeckId")
                        .HasName("user_decks_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("user_decks", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<DateTime?>("ObtainedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("obtained_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("SpellId")
                        .HasColumnType("integer")
                        .HasColumnName("spell_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("InventoryId")
                        .HasName("user_inventory_pkey");

                    b.HasIndex(new[] { "SpellId" }, "idx_user_inventory_spell_id");

                    b.HasIndex(new[] { "UserId" }, "idx_user_inventory_user_id");

                    b.ToTable("user_inventory", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserUpgrade", b =>
                {
                    b.Property<int>("UpgradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("upgrade_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UpgradeId"));

                    b.Property<int?>("CostClick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cost_click")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("PowerMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("power_multiplier")
                        .HasDefaultValueSql("1.0");

                    b.HasKey("UpgradeId")
                        .HasName("user_upgrades_pkey");

                    b.ToTable("user_upgrades", (string)null);
                });

            modelBuilder.Entity("Domain.Models.DeckSlot", b =>
                {
                    b.HasOne("Domain.Models.UserDeck", "Deck")
                        .WithMany("DeckSlots")
                        .HasForeignKey("DeckId")
                        .IsRequired()
                        .HasConstraintName("deck_slots_deck_id_fkey");

                    b.HasOne("Domain.Models.UserInventory", "Inventory")
                        .WithMany("DeckSlots")
                        .HasForeignKey("InventoryId")
                        .IsRequired()
                        .HasConstraintName("deck_slots_inventory_id_fkey");

                    b.Navigation("Deck");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Domain.Models.GachaPull", b =>
                {
                    b.HasOne("Domain.Models.Spell", "Spell")
                        .WithMany("GachaPulls")
                        .HasForeignKey("SpellId")
                        .IsRequired()
                        .HasConstraintName("gacha_pulls_spell_id_fkey");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("GachaPulls")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("gacha_pulls_user_id_fkey");

                    b.Navigation("Spell");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.GameSafe", b =>
                {
                    b.HasOne("Domain.Models.UserDeck", "EquippedDeck")
                        .WithMany("GameSaves")
                        .HasForeignKey("EquippedDeckId")
                        .HasConstraintName("game_saves_equipped_deck_id_fkey");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("GameSaves")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("game_saves_user_id_fkey");

                    b.Navigation("EquippedDeck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Trace", b =>
                {
                    b.HasOne("Domain.Models.UserInventory", "InventoryIdOfferNavigation")
                        .WithMany("TraceInventoryIdOfferNavigations")
                        .HasForeignKey("InventoryIdOffer")
                        .IsRequired()
                        .HasConstraintName("traces_inventory_id_offer_fkey");

                    b.HasOne("Domain.Models.UserInventory", "InventoryIdWantNavigation")
                        .WithMany("TraceInventoryIdWantNavigations")
                        .HasForeignKey("InventoryIdWant")
                        .IsRequired()
                        .HasConstraintName("traces_inventory_id_want_fkey");

                    b.HasOne("Domain.Models.User", "UserIdOfferNavigation")
                        .WithMany("TraceUserIdOfferNavigations")
                        .HasForeignKey("UserIdOffer")
                        .IsRequired()
                        .HasConstraintName("traces_user_id_offer_fkey");

                    b.HasOne("Domain.Models.User", "UserIdReceiveNavigation")
                        .WithMany("TraceUserIdReceiveNavigations")
                        .HasForeignKey("UserIdReceive")
                        .IsRequired()
                        .HasConstraintName("traces_user_id_receive_fkey");

                    b.Navigation("InventoryIdOfferNavigation");

                    b.Navigation("InventoryIdWantNavigation");

                    b.Navigation("UserIdOfferNavigation");

                    b.Navigation("UserIdReceiveNavigation");
                });

            modelBuilder.Entity("Domain.Models.UserClickerUpgrade", b =>
                {
                    b.HasOne("Domain.Models.UserUpgrade", "Upgrade")
                        .WithMany("UserClickerUpgrades")
                        .HasForeignKey("UpgradeId")
                        .IsRequired()
                        .HasConstraintName("user_clicker_upgrades_upgrade_id_fkey");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserClickerUpgrades")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_clicker_upgrades_user_id_fkey");

                    b.Navigation("Upgrade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UserDeck", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserDecks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_decks_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UserInventory", b =>
                {
                    b.HasOne("Domain.Models.Spell", "Spell")
                        .WithMany("UserInventories")
                        .HasForeignKey("SpellId")
                        .IsRequired()
                        .HasConstraintName("user_inventory_spell_id_fkey");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserInventories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_inventory_user_id_fkey");

                    b.Navigation("Spell");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Spell", b =>
                {
                    b.Navigation("GachaPulls");

                    b.Navigation("UserInventories");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("GachaPulls");

                    b.Navigation("GameSaves");

                    b.Navigation("TraceUserIdOfferNavigations");

                    b.Navigation("TraceUserIdReceiveNavigations");

                    b.Navigation("UserClickerUpgrades");

                    b.Navigation("UserDecks");

                    b.Navigation("UserInventories");
                });

            modelBuilder.Entity("Domain.Models.UserDeck", b =>
                {
                    b.Navigation("DeckSlots");

                    b.Navigation("GameSaves");
                });

            modelBuilder.Entity("Domain.Models.UserInventory", b =>
                {
                    b.Navigation("DeckSlots");

                    b.Navigation("TraceInventoryIdOfferNavigations");

                    b.Navigation("TraceInventoryIdWantNavigations");
                });

            modelBuilder.Entity("Domain.Models.UserUpgrade", b =>
                {
                    b.Navigation("UserClickerUpgrades");
                });
#pragma warning restore 612, 618
        }
    }
}
